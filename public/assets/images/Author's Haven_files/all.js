!(function () {
  const a = self.console; const l = Object.freeze({
    NONE: 0, ERROR: 1, WARN: 2, INFO: 3, LOG: 4,
  }); const d = ['error', 'warn', 'info', 'log']; const u = window.Rollbar && window.Rollbar.options.enabled; const s = {
    debug: ['critical', 'error', 'warn', 'debug', 'log'], info: ['critical', 'error', 'warn', 'info'], warning: ['critical', 'error', 'warn'], error: ['critical', 'error'], critical: ['critical'],
  }; const c = void 0 !== a && void 0 !== a.log && void 0 !== a.error && void 0 !== a.debug && void 0 !== a.warn && typeof Function.prototype.apply === 'function'; let f = void 0; let t = void 0; const i = function (e, n, t, i) { return a[n] ? t ? a[n](t) : a[n]() : e.log(`----------- ${t || i} ----------- `); }; const o = function (e) { let n = e.level; var o = { setLevel(e) { return n = e, o; }, getLevel() { return n || f; } }; return d.forEach((i) => { o[i] = function () { for (var e = arguments.length, n = Array(e), t = 0; t < e; t++)n[t] = arguments[t]; return (function (e, n, t) { if (c) { let i; const o = d.indexOf(n); const r = e.getLevel(); return ~o && o + 1 <= r && a[n].apply(a, t), u && ~s[window.Rollbar.options.reportLevel].indexOf(n) && (i = window.Rollbar)[n].apply(i, t), e; } }(o, i, n)); }; }), o.groupCollapsed = function (e) { return i(o, 'groupCollapsed', e, 'GROUP START'); }, o.group = function (e) { return i(o, 'group', e, 'GROUP START'); }, o.groupEnd = function () { return i(o, 'groupEnd', null, 'GROUP END'); }, o.devError = function () { process.env.NODE_ENV !== 'production' && o.error.apply(o, arguments); }, o.debug = o.log, o; }; const e = function () { const e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}; e.level = e.level || l.NONE; const n = e.newInstance || !t ? o(e) : t; return t || e.newInstance || (t = n), n; }; const p = {
    LOCAL: 'local', URL: 'url', CAMERA: 'camera', IMAGE_SEARCH: 'image_search', DROPBOX: 'dropbox', FACEBOOK: 'facebook', INSTAGRAM: 'instagram',
  }; const g = 'upload-finish'; const v = 'widget-view-change'; const h = 'display-changed'; const m = 'uw_init'; const y = 'uw_mini'; const w = 'uw_config'; const b = 'uw_prepare'; const x = 'uw_prebatch'; const E = 'uw_event'; const C = 'uw_show'; const O = 'uw_hide'; const _ = 'uw_tags'; const k = 'uw_upload_presets'; const R = 'uw_file'; const S = 'uw_clientbatch'; const N = ['buttonCaption', 'buttonClass', 'queueViewPosition', 'controlVpMeta', 'fieldName', 'frameZIndex', 'widgetHost']; const I = 'initial'; const T = 'expanded'; const j = 'minimized'; const F = function (e, n, t, i) { let o = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null; const r = (o = o || self).document.createElement(e); if (n = n || {}, t && (n.class = t), n) { const a = n; Object.keys(a).forEach((e) => r.setAttribute(e, a[e])); } if (i) { const l = i; Object.keys(l).forEach((e) => r.dataset[e] = l[e]); } return r; }; const z = function (e) { let n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null; return n = n || self, typeof e === 'string' ? n.document.querySelector(e) : e; }; const A = function (e) { e.parentNode && e.parentNode.removeChild(e); }; const D = function (n, t) { Object.keys(t).forEach((e) => { n.style[e] = t[e]; }); }; const H = function (e) { D(e, { display: 'none' }); }; const L = 'FileReader' in self && 'FileList' in self && 'Blob' in self; const U = function (e) { return typeof e === 'string'; }; const r = function (e) { return typeof e === 'function'; }; const q = 500; const V = 55; const B = 'right:35px'; const G = '(min-width: 767px)'; const $ = 610; const W = 'hidden'; const M = 'shown'; const P = e(); const J = function (o, e, r) {
    let n; let t; const a = /cloudinary\.com/; P.log(`[all.comms]: using pm domain regex =  ${a.toString()}`); const i = function (e, n) { r.widgetCallback && r.widgetCallback(n, e); }; const l = function (e, n) { let t; let i; const o = arguments.length > 2 && void 0 !== arguments[2] && arguments[2] ? { type: e, data: n } : (t = e, i = n, JSON.stringify({ type: t, data: i })); r.postMessage(o); }; const d = function (e) {
      i({
        info: e, event: h, uw_event: !0, data: { event: h, info: e },
      });
    }; const u = ((n = {})[v] = function (e) { r.handleWidgetViewTypeChange(e.info); const n = e.info.type === j ? j : T; d(n); }, n[g] = function (e) { if (P.log('[all.comms]: received uploaded file data - ', e), e.info.failed)i(e.info, { status: e.info.status, statusText: e.info.statusText }), r.triggerEvent('cloudinarywidgetfileuploadfail', [e.info]); else { const n = e.info.uploadInfo; const t = { event: 'success', info: n }; r.processUploadResult(n), i(t), r.triggerEvent('cloudinarywidgetfileuploadsuccess', t); } }, n); const s = ((t = {})[E] = function (e, n) {
      e.event && u[e.event] ? u[e.event](e, n) : i({
        info: e.info, event: e.event, uw_event: !0, data: e,
      });
    }, t[O] = function () { r.hideWidget(); const e = { event: 'close', info: { message: 'user closed the widget' } }; i(e), r.triggerEvent('cloudinarywidgetclosed', e), d(W); }, t[b] = function (e, n) { const t = function (e) { return l(b, e); }; const i = n.prepareUploadParams || n.uploadSignature; typeof i === 'function' ? i((e) => { P.log('[all.comms]: received prepared data from client: ', e); const n = [].concat(e).map((e) => (typeof e === 'string' ? { signature: e } : e)); t(n); }, e.request) : typeof n.uploadSignature === 'string' && t([{ signature: n.uploadSignature }]); }, t[x] = function (e, n) { if (typeof n.preBatch !== 'function') throw new Error('UploadWidget - preBatch handler not found!'); n.preBatch((e) => { P.log('[all.comms]: received pre-batch data from client: ', e), l(x, e); }, e.request); }, t[_] = function (e, n) { n.getTags((e) => { P.log('[all.comms]: received tags from client: ', e), l(_, { tags: e }); }, e.prefix); }, t[k] = function (e, n) { n.getUploadPresets((e) => { P.log('[all.comms]: received uploadPresets from client: ', e), l(k, { uploadPresets: e }); }); }, t); return window.addEventListener('message', (e) => { const n = o(); if (e.origin.match(a)) { const t = (function (n) { let e = void 0; try { U(n) && (e = JSON.parse(n)); } catch (e) { P.log('[all.comms]: failed to deserialize message: ', n); } return e; }(e.data)); let i = !1; t && t.widgetId && t.widgetId === n.widgetId && (P.log(`[all.comms]: received message from widget: ${n.widgetId}`, t), s[t.type] && (i = !0, s[t.type](t, n))), i || P.log('[all.comms]: received invalid message, invalid widget ID or invalid type! ', e.data); } }), { sendMessage: l, sendDisplayChangedCallback: d };
  }; const K = /(left|right)(?::([0-9a-z]*))?$/; const X = 'head meta[name="viewport"]'; const Q = function (r, a, n) {
    const e = r(); const o = { raw: B, side: null, offset: null }; const l = F('iframe', {
      frameborder: 'no', allow: 'camera', width: '100%', height: '100%',
    }, null, { test: 'uw-iframe' }); D(l, { border: 'none', background: 'transparent' }); const t = window.matchMedia(G); const d = e.inlineContainer && z(e.inlineContainer); const u = e.frameContainer && z(e.frameContainer); d && D(d, { minHeight: `${$}px`, overflowX: 'hidden' }), u && D(u, { position: 'relative' }); let i = null; let s = !1; let c = ''; let f = !1; let p = !1; let g = !1; let v = !1; let h = void 0; const m = function (e) { e.preventDefault(); }; const y = function () { if (!d && !u) { const e = g && v; h.body && (i = i === null ? h.body.style.overflow : i, h.body.style.overflow = e ? 'hidden' : i), e ? h.addEventListener('touchmove', m) : h.removeEventListener('touchmove', m), (function (e) { if (!0 === r().controlVpMeta) if (e) { let n = z(X, self.top); n || (n = F('meta', { name: 'viewport' }, null, null, self.top), h.head.appendChild(n)), n.content = 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no'; } else { const t = z(X, self.top); s && t ? t.content = c : t && h.head.removeChild(t); } }(e)); } }; const w = function () { f && p && (H(l), g = !1, y()); }; const b = function () { f && p && (D(l, { display: 'block' }), g = !0, y(), l.focus()); }; const x = function () { let e; e = l, (d || (u || void 0) || document.body).appendChild(e), d || h.addEventListener('keyup', (e) => { e.keyCode === 27 && w(); }); }; const E = function (e) {
      const n = `${Math.min(q, window.innerWidth)}px`; D(l, {
        width: e ? '100%' : n, bottom: e ? '0px' : '5px', height: `${V}px`, top: '',
      }), (function (e) { const n = r(); if (n.queueViewPosition && n.queueViewPosition !== o.raw || !o.side || !o.offset) { o.raw = n.queueViewPosition || o.raw; const t = K.exec(o.raw); if (!t) throw new Error(`queueViewPosition param (${n.queueViewPosition || ''}) is invalid. (valid ex: "right:35px")`); o.side = t[1], o.offset = t[2] || '0'; } let i = void 0; i = e ? { left: '0px', right: '0px' } : o.side === 'left' ? { left: o.offset || '', right: '' } : { right: o.offset || '', left: '' }, D(l, i); }(e)), v = !1, y();
    }; const C = function () {
      D(l, d ? { height: `${$}px`, width: '100%' } : {
        width: '100%', height: '100%', top: '0px', left: '0px', bottom: '',
      }), v = f, y();
    }; const O = function () { b(), C(); }; const _ = function (e) { E(!e.matches); }; const k = function (e) { switch (t.removeListener(_), e.type) { case I: case T: C(); break; case j: E(!t.matches), t.addListener(_); } }; const R = function (e) { return l.contentWindow.postMessage(e, a); }; const S = function () { return p; }; const N = function () { return f; }; const A = function () { return f && g; }; const L = function () { return N() && !v; }; const U = function () { w(), f = !1; }; const W = function (e) { f = !0, p && (O(), e && e.files && H(l)); }; const M = function () { f && p && !v && E(!t.matches); }; const P = function e() {
      l.removeEventListener('load', e), p = !0, n({
        open: W, close: U, showWidget: b, hideWidget: w, isFrameReady: S, isWidgetOpen: N, isWidgetMinimized: L, isWidgetShowing: A, postMessage: R, handleWidgetViewTypeChange: k, optionsUpdated: M,
      }), O();
    }; !(function (e) { h = (function () { let e = self.document; try { e = self.top.document; } catch (e) {} return e; }()); let n; let t; const i = (t = [], (n = e).debug && t.push('debug=true'), n.dev && t.push('dev=true'), n.cloudName && t.push(`cloudName=${n.cloudName}`), t.push(`pmHost=${self.location.protocol}//${self.location.host}`), t); const o = `${a}?${i.join('&')}`; l.setAttribute('src', o), H(l), D(l, { position: d ? null : u ? 'absolute' : 'fixed', zIndex: d ? null : e.frameZIndex || '1000000' }), l.addEventListener('load', P), (function () { if (!0 === r().controlVpMeta) { const e = z(X, self.top); e && (c = e.content, s = !0); } }()), x(); }(e));
  }; const Y = 'fetch' in self; const Z = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (e) { return typeof e; } : function (e) { return e && typeof Symbol === 'function' && e.constructor === Symbol && e !== Symbol.prototype ? 'symbol' : typeof e; }; const ee = Object.assign || function (e) { for (let n = 1; n < arguments.length; n++) { const t = arguments[n]; for (const i in t)Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]); } return e; }; const ne = function (i) {
    const o = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 'GET';
    const e = arguments[2];
    const r = arguments[3]; const a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : {}; const l = e && (void 0 === e ? 'undefined' : Z(e)) === 'object' ? JSON.stringify(e) : e; const
      n = Y; return (n ? self.fetch(i, {
      method: o, body: l, headers: r ? new Headers(r) : void 0, ...a.fetchOptions,
    }) : new Promise(((e, n) => { const t = new XMLHttpRequest(); t.open(o, i), a.responseType && (t.responseType = a.responseType), t.onerror = function () { return n(t); }, t.ontimeout = function () { return n(t); }, t.onload = function () { return e(t); }, (function (n, e) { if (e) { const t = e; Object.keys(t).forEach((e) => n.setRequestHeader(e, t[e])); } }(t, r)), t.send(l); }))).then(((e, n, t) => { const i = n.responseType; const o = function (e) { return t.response = e, t; }; return !n.dontRead && e && t.ok ? i && t[i] ? t[i]().then(o) : t.json().then(o) : t; }).bind(null, n, a));
  }; const te = e(); const ie = 'cloudinary-button'; const oe = 'cloudinary-thumbnails'; const re = 'cloudinary-thumbnail'; const ae = 'cloudinary-delete'; const le = function (e) { return e.fieldName || 'image'; }; const de = function (e, n) { let t = n.form; return !t && e && (t = (function (e, n) { let t; let i = null; if (e.closest)i = e.closest(n); else { const o = self.document.querySelectorAll(n); if (o && o.length) for (let r = 0; r < o.length; r++) { const a = o[r]; if (t = e, a.compareDocumentPosition(t) & Node.DOCUMENT_POSITION_CONTAINED_BY) { i = a; break; } } } return i; }(e, 'form'))), t; }; const ue = function (e, n, t) { let i = de(n, t); i && (i = z(i)) && (function (e, n, t) { const i = F('input', { type: 'hidden', name: le(t) }, null, { cloudinaryPublicId: e.public_id }); i.value = `${[e.resource_type, e.type, e.path].join('/')}#${e.signature}`; try { i.dataset.cloudinary = JSON.stringify(e); } catch (e) { te.error('[all.pageIntegrations]: failed to add info as serialized data attribute'); }n.appendChild(i); }(e, i, t)); }; const se = function (o, r, a, l, d, u) { o.addEventListener('click', function n(e) { let t; const i = `${(t = d).deleteHost ? t.deleteHost : `https://api${t.dev ? '-dev' : t.staging ? '-staging' : ''}.cloudinary.com`}/v1_1/${d.cloudName}/delete_by_token`; return te.log(`[all.pageIntegrations]: \n        about to send delete request with token: ${l.delete_token} to : ${i}`), e.preventDefault(), ne(i, 'POST', { token: l.delete_token }, { 'Content-Type': 'application/json' }, { dontRead: !0 }).then((e) => { e.status === 200 && (te.log('[all.pageIntegrations]: successfully deleted file'), o.removeEventListener('click', n), (function (e, n, t, i) { A(e); const o = de(n, i); if (o) { const r = o.querySelector(`input[name="${le(i)}"][data-cloudinary-public-id="${t.public_id}"]`); r && A(r); } }(r, a, l, d)), u.triggerEvent('cloudinarywidgetdeleted', l)); }).catch((e) => { te.warn(`[all.pageIntegrations]: failed to delete file with status: ${e.status}`); }); }); }; const ce = function (e, n, t, i) { if (!1 !== t.thumbnails && (t.thumbnails || n)) { let o = !0; let r = z(`.${oe}`); if (r || (o = !1, r = F('ul', null, oe)), r.appendChild(function (e, n, t, i) { const o = F('li', null, re, { cloudinary: JSON.stringify(e) }); let r = void 0; e.thumbnail_url ? (r = F('img', { src: e.thumbnail_url })).addEventListener('load', function e() { o.classList.add('active'), r.removeEventListener('load', e); }) : (r = F('span')).textContent = e.public_id; if (o.appendChild(r), e.delete_token) { const a = F('a', { href: '#' }, ae); a.textContent = 'x', o.appendChild(a), se(a, o, n, e, t, i); } return o; }(e, n, t, i)), !o) { te.log('[all.pageIntegrations]: adding thumbnails list to dom'); const a = t.thumbnails && z(t.thumbnails); a ? a.appendChild(r) : n && n.insertAdjacentElement('afterend', r); } } }; const fe = function (e, n) { return n === 0 ? e : e.substr(0, 1).toUpperCase() + e.substr(1); }; const n = function (t) { return Object.keys(t).reduce((e, n) => (e[n.indexOf('_') > 0 ? n.split('_').map(fe).join('') : n] = t[n], e), {}); }; const pe = ['keepWidgetOpen', 'stylesheet']; const ge = Object.prototype.toString; const ve = function (n) { return pe.forEach((e) => { void 0 !== n[e] && (function () { let e; (e = console).warn.apply(e, arguments); }(`Cloudinary.UploadWidget - '${e}' is no longer used in this version.`)); }); }; const he = function (e) { return e ? n(e) : {}; }; const me = e(); const ye = 'DATA_URL'; const we = 'ARRAY_BUFFEr'; const be = e(); let xe = 0; const Ee = function (g) {
    let v = null; const l = function (n, e, t, i, l) {
      let d; let u; let o; let r; let a; let s; let c; let f; let p = void 0; return !i.maxFileSize || i.maxFileSize > 0 && n.size <= i.maxFileSize ? (v || (d = [], u = new FileReader(), o = null, r = function () {
        o && o.readResolve({
          file: o.file, index: o.index, count: o.count, result: u.result,
        }), a();
      }, a = function () { o = null, u.removeEventListener('load', r, !1), u.removeEventListener('error', s, !1), d.length && c(d.shift()); }, s = function () { me.log('[utils.fileReader]: failed to read file', u.error), o && o.readReject(u.error), a(); }, c = function (e) { o = e, u.addEventListener('load', r, !1), u.addEventListener('error', s, !1), e.readAs === we ? u.readAsArrayBuffer(e.file) : u.readAsDataURL(e.file); }, f = function (i, o) {
        const r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0; const a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0; return new Promise(((e, n) => {
          const t = {
            file: o, index: r, count: a, readAs: i, readResolve: e, readReject: n,
          }; u.readyState !== 1 ? c(t) : d.push(t);
        }));
      }, v = { readAsUrl(e) { const n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0; const t = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0; return f(ye, e, n, t); }, readAsBuffer(e) { const n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0; const t = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0; return f(we, e, n, t); } }), p = v.readAsUrl(n, e, t).then((e) => {
        return t = l, i = (n = e).file, o = n.result, r = n.index, a = n.count, void g.sendMessage(R, {
          lastModified: i.lastModified, lastModifiedDate: i.lastModifiedDate, name: i.name, size: i.size, type: i.type, file: o, index: r, count: a, batchId: t,
        }, !0); let n; let t; let i; let o; let r; let a;
      }).catch((e) => { be.error('[global.all.uploadsHandler]: failed to send file data to widget for upload', e.code, n); })) : be.log('[global.all.uploadsHandler]: provided file is larger than max file size configured', n.size), p;
    }; const r = function (o, r, a) {
      return Promise.race(Array.prototype.map.call(o, (e, n) => {
        let t; let i = null; return t = e, L && (t instanceof File || t.toString() === '[object File]') ? i = l(e, n, o.length, r, a) : U(e) ? g.sendMessage(R, {
          file: e, index: n, count: o.length, batchId: a,
        }) : be.warn('[global.all.uploadsHandler]: unknown type of object sent to upload', e), i;
      }));
    }; return { handleFiles(e, n) { return e && e.files && e.files.length ? (t = e.files, i = n, o = `batch_${xe += 1}`, g.sendMessage(S, { batchId: o, count: t.length }), r(t, i, o)) : Promise.resolve(); let t; let i; let o; } };
  }; const Ce = e(); let Oe = 0; const _e = function (e, n) { const t = (function (e, n) { if (e = e || {}, ge.call(e) !== '[object Object]') throw new Error('[Cloudinary.UploadWidget]: widget options must be a valid Object'); const t = he(e); return t.secure = !1 !== t.secure, t.requirePrepareParams = !!t.prepareUploadParams || !!t.uploadSignature, t.useTagsCallback = r(t.getTags), t.useUploadPresetsCallback = r(t.getUploadPresets), t.usePreBatchCallback = r(t.preBatch), t.inlineMode = !!t.inlineContainer, t.fieldName = e.fieldName || n && n.getAttribute('name') || null, ve(t), t; }(e, n)); return Oe += 1, t.widgetId = `widget_${Oe}`, t; }; const ke = function (e, a, l) {
    l = (function (e, n) { let t = e || n && n.element; if (t) { try { t = z(t); } catch (e) { throw new Error("[Cloudinary.UploadWidget]: 'element' param must either be a valid HTMLElement or a selector string"); } if (!t || !t.nodeType) throw new Error("[Cloudinary.UploadWidget]: 'element' param must resolve to a valid HTMLElement"); } return t; }(l, e)); let r = _e(e, l); if (r.inlineContainer && !z(r.inlineContainer)) throw new Error("[Cloudinary.UploadWidget]: 'inlineContainer' param must either be a valid HTMLElement or a selector string"); delete r.element; let n; let t = void 0; let d = void 0; let u = void 0; let s = void 0; let c = void 0; const f = function (e, n) { r.$ && r.$(l || r.form || document).trigger(e, n); }; const i = function (e) { return t ? t.then(e).catch((e) => Ce.error('Cloudinary.UploadWidget - encountered error ! ', e)) : Ce.error('Cloudinary.UploadWidget - Widget frame API not ready yet!'); }; const p = function (n, t) { return i((e) => { e.open(t), e.isFrameReady() && (d.sendMessage(C, { source: n, options: t }, !0), u.handleFiles(t, g()).then(() => { setTimeout(() => { e.showWidget(), d.sendDisplayChangedCallback(M); }, 150); })); }); }; const o = function (o) { return i((e) => { let n; let t; const i = he(o); d.sendMessage(w, i), n = i, t = { ...r }, N.forEach((e) => { void 0 !== n[e] && (t[e] = n[e]); }), r = t, e.optionsUpdated(); }); }; var g = function () { return r; }; return n = (function () {
      const e = r.secure ? 'https:' : 'http:'; let
        n = void 0; if (!0 === r.dev)n = '//widget-dev.cloudinary.com/index.html'; else { const t = `${r.widgetBase || `//widget${!0 === r.staging ? '-staging' : ''}.cloudinary.com/`}v2.0/n/`; n = r.widgetHost || `${t + r.cloudName}/${r.widgetVersion}/index.html`; } return n = n.indexOf('http') !== 0 ? e + n : n;
    }()), (t = new Promise(Q.bind(null, g, n))).then((e) => {
      s = e.isWidgetShowing, c = e.isWidgetMinimized, d = J(g, 0, {
        triggerEvent: f, processUploadResult(e) { return n = e, t = l, i = g(), o = { triggerEvent: f }, ue(n, t, i), void ce(n, t, i, o); let n; let t; let i; let o; }, widgetCallback: a, ...e,
      }); let n; let t; let i; let o; const r = g(); d.sendMessage(m, { ...r, showOnStart: e.isWidgetOpen() }), u = Ee(d), l && (n = l, t = p, (o = F('a', { href: '#' }, (i = r).buttonClass || ie)).innerHTML = i.buttonCaption || 'Upload image', n.style.display = 'none', n.parentNode && n.parentNode.insertBefore(o, n.previousSibling), o.addEventListener('click', (e) => (t(), e.preventDefault && e.preventDefault(), e.stopPropagation && e.stopPropagation(), !1)));
    }), {
      open(e, n) { return p(e, n), this; }, update(e) { const n = this; return o(e).then(() => n); }, close(e) { let n; return n = e, i((e) => { e.close(), d.sendMessage(O, n); }), this; }, hide() { return i((e) => e.hideWidget()), this; }, show() { return i((e) => e.showWidget()), this; }, minimize() { return i(() => { d.sendMessage(y); }), this; }, isShowing() { return !!s && s(); }, isMinimized() { return !!c && c(); },
    };
  }; const Re = e(); !(function (e) {
    let n; const i = { cloudName: null, apiKey: null }; const o = e.jQuery ? e.jQuery : e.$ && e.$.fn && e.$.fn.jquery ? e.$ : null; const r = e.location.search.indexOf('debug=true') > -1; const a = e.location.search.indexOf('dev=true') > -1; n = r ? l.LOG : l.WARN, f = n, (function () { try { const e = F('style', { id: 'cloudinary-uw-page-styles', type: 'text/css' }); e.innerHTML = ".cloudinary-thumbnails { list-style: none; margin: 10px 0; padding: 0 }\n        .cloudinary-thumbnails:after { clear: both; display: block; content: '' }\n        .cloudinary-thumbnail { float: left; padding: 0; margin: 0 15px 5px 0; display: none } \n        .cloudinary-thumbnail.active { display: block } \n        .cloudinary-thumbnail img { border: 1px solid #01304d; border-radius: 2px; -moz-border-radius: 2px; -webkit-border-radius: 2px } \n        .cloudinary-thumbnail span { font-size: 11px; font-family: Arial, sans-serif; line-height: 14px; border: 1px solid #aaa; max-width: 150px; word-wrap: break-word; word-break: break-all; display: inline-block; padding: 3px; max-height: 60px; overflow: hidden; color: #999; } \n        .cloudinary-delete { vertical-align: top; font-size: 13px; text-decoration: none; padding-left: 2px; line-height: 8px; font-family: Arial, sans-serif; color: #01304d }\n        .cloudinary-button { background-color: #0078FF; color: #FFFFFF; text-decoration: none; font-size: 14px; line-height: 28px; height: 28x; cursor: pointer; font-weight: normal; display: inline-block; border-radius: 4px; padding: 10px 14px;}\n        .cloudinary-button:hover {-webkit-box-shadow: 0 2px 4px 0 rgba(0, 0, 0, .5); box-shadow: 0 2px 4px 0 rgba(0, 0, 0, .5); } "; const n = z('head'); n && n.appendChild(e); } catch (e) { Re.error('[all.pageStyles]: failed to apply styles'); } }()); const t = e.cloudinary = e.cloudinary || {}; t.applyUploadWidget = function (e, n, t) {
      return ke({
        ...i, dev: a, debug: r, ...n, widgetVersion: '207', $: o,
      }, t, e);
    }, t.createUploadWidget = function (e, n) { return t.applyUploadWidget(null, e, n); }, t.openUploadWidget = function (e, n) { return t.createUploadWidget(e, n).open(); }, t.setCloudName = function (e) { i.cloudName = e; }, t.setAPIKey = function (e) { i.apiKey = e; }, t.WIDGET_SOURCES = { ...p }, t.WIDGET_VERSION = '207', o && (o.fn.cloudinary_upload_widget = function (e, n) { t.applyUploadWidget(o(this)[0], e, n); });
  }(self));
}());
